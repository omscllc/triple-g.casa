// =============================================================================
// MIXINS
// =============================================================================
//
// This file contains all application-wide Sass mixins.
// =============================================================================

/// Responsive breakpoint manager
/// @param {String} $breakpoint - The breakpoint name
/// @requires $breakpoints
@mixin respond-to($breakpoint) {
  $breakpoints: (
    "xs": 0,
    "sm": 576px,
    "md": 768px,
    "lg": 992px,
    "xl": 1200px,
    "xxl": 1400px
  );

  @if map-has-key($breakpoints, $breakpoint) {
    @media (min-width: map-get($breakpoints, $breakpoint)) {
      @content;
    }
  } @else {
    @warn "No value found for `#{$breakpoint}`. "
         + "Available breakpoints are: #{map-keys($breakpoints)}.";
  }
}

/// Clearfix
@mixin clearfix {
  &::after {
    content: "";
    display: table;
    clear: both;
  }
}

/// Hide text while making it readable for screen readers
@mixin visually-hidden {
  border: 0;
  clip: rect(0 0 0 0);
  height: 1px;
  margin: -1px;
  overflow: hidden;
  padding: 0;
  position: absolute;
  width: 1px;
}

/// Truncate text with an ellipsis
@mixin truncate {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

/// CSS Triangle
/// @param {String} $direction - The direction of the triangle
/// @param {Color} $color - The color of the triangle
/// @param {Number} $size - The size of the triangle
@mixin triangle($direction, $color, $size) {
  width: 0;
  height: 0;

  @if $direction == "up" {
    border-left: $size solid transparent;
    border-right: $size solid transparent;
    border-bottom: $size solid $color;
  } @else if $direction == "down" {
    border-left: $size solid transparent;
    border-right: $size solid transparent;
    border-top: $size solid $color;
  } @else if $direction == "left" {
    border-top: $size solid transparent;
    border-bottom: $size solid transparent;
    border-right: $size solid $color;
  } @else if $direction == "right" {
    border-top: $size solid transparent;
    border-bottom: $size solid transparent;
    border-left: $size solid $color;
  }
}

/// Box shadow
/// @param {Number} $x - X offset
/// @param {Number} $y - Y offset
/// @param {Number} $blur - Blur radius
/// @param {Number} $spread - Spread radius
/// @param {Color} $color - Shadow color
@mixin box-shadow($x: 0, $y: 2px, $blur: 4px, $spread: 0, $color: rgba(0, 0, 0, 0.1)) {
  box-shadow: $x $y $blur $spread $color;
}

/// Flexbox container
/// @param {String} $direction [row] - Flex direction
/// @param {String} $wrap [wrap] - Flex wrap
/// @param {String} $justify [flex-start] - Justify content
/// @param {String} $align [stretch] - Align items
@mixin flex-container($direction: row, $wrap: wrap, $justify: flex-start, $align: stretch) {
  display: flex;
  flex-direction: $direction;
  flex-wrap: $wrap;
  justify-content: $justify;
  align-items: $align;
}

/// Flexbox item
/// @param {Number} $grow [0] - Flex grow
/// @param {Number} $shrink [1] - Flex shrink
/// @param {String} $basis [auto] - Flex basis
@mixin flex-item($grow: 0, $shrink: 1, $basis: auto) {
  flex: $grow $shrink $basis;
}

/// Grid container
/// @param {Number} $columns [12] - Number of columns
/// @param {String} $gap [1rem] - Gap between columns
@mixin grid-container($columns: 12, $gap: 1rem) {
  display: grid;
  grid-template-columns: repeat($columns, 1fr);
  gap: $gap;
}

/// Font face
/// @param {String} $font-family - Font family name
/// @param {String} $file-path - File path
/// @param {String} $weight [normal] - Font weight
/// @param {String} $style [normal] - Font style
@mixin font-face($font-family, $file-path, $weight: normal, $style: normal) {
  @font-face {
    font-family: $font-family;
    font-weight: $weight;
    font-style: $style;
    src: url('#{$file-path}.woff2') format('woff2'),
         url('#{$file-path}.woff') format('woff');
    font-display: swap;
  }
}
